---
description: 
globs: 
alwaysApply: true
---
统一使用中文回复

以下是基于 Flutter 跨平台框架、MySQL 9.2.0 数据库与 Python 后端技术栈的 Cursor 项目规则设计，结合技术选型与开发规范，确保项目高效、安全且可维护：

一、技术选型与版本规范

前端框架

Flutter 3.24+：采用最新稳定版本，利用其原生渲染引擎（Skia）和热重载特性提升开发效率。Dart 语言：遵循空安全（Null Safety）规范，使用响应式编程模式构建 UI 组件。跨平台兼容性：确保代码兼容 Android、iOS、Web、Windows、macOS 和 Linux，通过 flutter doctor 验证环境配置。
数据库

MySQL 9.2.0 创新版：

使用新增的 CREATE_SPATIAL_REFERENCE_SYSTEM 权限替代 SUPER 权限，降低安全风险。支持 JavaScript 存储库（CREATE LIBRARY），通过 MLE 组件实现复杂业务逻辑。弃用 FLUSH PRIVILEGES，改用动态权限管理。
索引优化：对高频查询字段添加索引，避免全表扫描。
后端技术栈

Python 3.10+：使用类型注解（Type Hints）提升代码可读性，结合 mypy 进行静态检查。框架选择：

Django：适合复杂业务场景，内置 ORM 和 Admin 管理界面。FastAPI：若需高性能 RESTful API，支持异步编程和 OpenAPI 文档。
数据库交互：通过 SQLAlchemy 或 Django ORM 实现数据模型映射，避免 SQL 注入。


二、开发规范

代码管理

Git 分支策略：主分支（main）保护，功能开发使用 feature/ 分支，修复问题使用 hotfix/ 分支。Commit 规范：遵循 Conventional Commits，如 feat: 新增用户登录模块。
Flutter 开发规则

组件化设计：按功能模块拆分 Widget，优先使用 StatelessWidget，状态管理采用 Provider 或 Riverpod。代码风格：遵循官方 Effective Dart 指南，禁用 new 关键字（Dart 2.0+）。性能优化：避免 Build 方法内执行耗时操作，使用 ListView.builder 实现长列表懒加载。
Python 后端规则

RESTful API 设计：资源路径使用复数名词（如 /api/users），状态码遵循 HTTP 标准。异步处理：高并发场景使用 asyncio 或 Celery 异步任务队列。依赖管理：通过 poetry 或 pipenv 管理虚拟环境，锁定依赖版本。


三、数据库与安全
输出数据字典，每次新段更新后都需要记录


四、部署与运维
输出完整的部署文档

五、文档与协作

API 文档：通过 Swagger 或 FastAPI 自动生成交互式文档。技术决策记录：使用 ADR（Architecture Decision Record）记录关键架构选择。代码审查：合并请求需至少 2 人审核，确保符合规范。

引用说明

Flutter 特性与开发规范参考网页 。MySQL 9.2.0 新增功能与弃用项来自网页 。Python 后端技术栈与安全实践综合网页 。
此规则可根据项目实际需求调整，建议定期同步技术栈版本更新（如 Flutter 和 MySQL 的季度发布）。

结算页面 -> 选择收货地址 -> 地址管理页面
  |
  └── 地址管理功能：
      1. 地址列表
      2. "新增地址"按钮
      3. 每个地址项：
         - 收货人信息
         - 联系电话
         - 详细地址
         - 设为默认
         - 编辑/删除按钮

HomePage
├── 顶部导航栏
│   ├── 搜索按钮 -> /product/search
│   ├── 购物车按钮 -> /cart
│   └── 设置按钮 -> /settings
└── 主要功能卡片
    ├── Dashboard -> /dashboard
    └── Settings -> /settings

CartPage (/cart)
├── 商品列表
│   ├── 商品信息
│   ├── 数量调整
│   └── 删除按钮
├── 底部结算栏
│   ├── 总价显示
│   └── 结算按钮 -> 选择收货地址
└── 返回按钮
